
* tsr-training-data - Tool to generate randomized VOC PASCAL training data 
  :PROPERTIES:
  :TOC:      :include descendants :depth 2
  :END:

Generate pseudorandomized training data in VOC format for traffic sign
detection system.  The images are intented to train YOLOV3 algorithm
implementation in [[https://github.com/zzh8829/yolov3-tf2][zzh8829/yolov3-tf2]].

:CONTENTS:
- [[#architecture][Architecture]]
- [[#getting-help][Getting help]]
- [[#using-create-datapy][Using create-data.py]]
  - [[#generate-example-test-images][Generate example test images]]
  - [[#input-class-images-option-classimages][Input: Class images option classImages]]
  - [[#input-background-images-option-backgrounds][Input: Background images option backgrounds]]
  - [[#output-list-of-test-images-option-imagelist][Output: List of test images option imagelist]]
  - [[#output-list-of-class-names-option-classes][Output: list of class names option classes]]
  - [[#output-generated-test-images-options-images][Output: generated test images options images]]
  - [[#output-generated-xml--annotations-options-annotations][Output: generated XML- annotations options annotations]]
  - [[#convert-images-to-tensorflow-format][Convert images to tensorflow format]]
  - [[#visualy-validate-tensorflow-conversion][Visualy validate tensorflow conversion]]
- [[#filters][Filters]]
  - [[#blur][Blur]]
  - [[#brightness][Brightness]]
  - [[#gamma][Gamma]]
  - [[#resize][Resize]]
  - [[#rotate][Rotate]]
  - [[#perspective][Perspective]]
  - [[#combined-filter][Combined filter]]
:END:

** Architecture

The picture below gives on overview of =tsr-training-data=:

#+name: process
#+name: architecture
#+BEGIN_SRC plantuml :eval no-export :exports results :file pics/architecture.jpg
  node  "zzh8829/yolov3-tf2" as YoloV3Tf2 <<github>> { 

  }

  node  "tsr-training-data" as TsrTrainingData {


        folder backgrounds <<binary>>



         folder "Class images" as classimages <<binary>>
         artifact filters
         component "create-data.py" as createTrainingData

         filters -->  createTrainingData : randomize


      folder out {

         folder tstVOC {
                folder images <<binary>>
                folder annotations <<VOC XML>>
                file classes <<text>>
                file imagelist <<text>>
         }
      }
      component  "marcus2002/yolov3-tf2-training" as Marcus2002 <<Docker>>


    folder tfData {

      file val.tf <<tensorflow data>>
      file train.tf  <<tensorflow data>>
    }

    actor "Visual validation" as jpgval


  }


      classimages --> createTrainingData
      backgrounds --> createTrainingData


      createTrainingData --> images 
      createTrainingData --> annotations
      createTrainingData --> classes
      createTrainingData --> imagelist



  YoloV3Tf2 .> Marcus2002 : Dockerized

  images --> Marcus2002
  annotations --> Marcus2002
      classes --> Marcus2002
      imagelist --> Marcus2002 : split into two\nfor val and train images


  Marcus2002 --> val.tf : create
  Marcus2002 --> train.tf : create

  val.tf --> jpgval : extract random picture
  train.tf --> jpgval : extract random picture

  node  "yolov3 tf2 training" as Marcus2002.2
  tfData .> Marcus2002.2 : for training ylov3


  #+END_SRC

  #+RESULTS: architecture
  [[file:pics/architecture.jpg]]

=tsr-training-data= merges randomly filtered /class images/ and
/background images/ to create VOC Pascal dataset, which can be
converted to tensforflow format and visually inspected using
dockerized tools from [[https://github.com/zzh8829/yolov3-tf2][zzh8829/yolov3-tf2]]. After validation tensorflow
format test images are passed further for yolo3 training.


** Getting help

Running  =create-data.py= with =--help= option 

#+name: usage
#+BEGIN_SRC sh :eval no-export :results output :exports both
python  create-data.py  --help
#+END_SRC

shows options

#+RESULTS: usage
#+begin_example

       USAGE: create-data.py [flags]
flags:

create-data.py:
  --annotations: path to  annotations folder (defaults 'annotations' under
    images folder)
    (default: 'out/tsrVOC/Annotations')
  --backgrounds: path to backgroud images
    (default: 'backgrounds')
  --blur: Blur filters used on classImages;
    repeat this option to specify a list of values
    (default: '[3, 5]')
    (an integer)
  --brightness: Brigness filters used on classImages;
    repeat this option to specify a list of values
    (default: '[-100, -50]')
    (an integer)
  --classImageWrangles: Filter wrangles to run class images;
    repeat this option to specify a list of values
    (default: "['blur', 'rotate', 'brightness']")
  --classImages: path to class images
    (default: 'Images/signs')
  --classes: path file where classnames are written
    (default: 'out/tsrVOC/classes.txt')
  --classesTemplate: template to interpolate classes file lines
    (default: '{value}-{startOrEnd}')
  --debug: -3=fatal, -1=warning, 0=info, 1=debug
    (default: '-1')
    (an integer)
  --imagelist: path file where list of images are written
    (default: 'out/tsrVOC/imagelist.txt')
  --imagelistTemplate: template to interpolate imagelist file lines
    (default: '{imageFileBasename} -1\n')
  --images: output folder where test images are written
    (default: 'out/tsrVOC/JPEGImages')
  --[no]interactive: show training data
    (default: 'false')
  --maxImages: Number of images to generate, -1=proces all background images
    (default: '-1')
    (an integer)
  --perspective: Possible perspective values;
    repeat this option to specify a list of values
    (default: "['45,-10', '10,10', '-30,10']")
  --rotates: Rotate filters used on classImages;
    repeat this option to specify a list of values
    (default: '[10, -45]')
    (an integer)
  --seed: Random seed (default None)
    (an integer)
  --testSet: Test set name (=folder in output -directory)
    (default: 'TSR1')

Try --helpfull to get a list of all flags.
#+end_example



** Using =create-data.py=

#+BEGIN_SRC sh :eval no-export :results output :exports none
rm -rf out/tsrVOC
#+END_SRC

#+RESULTS:

*** Generate example test images 

Running =create-data.py= without any options generates example test
images. For a more realistic example refer to [[file:yolov3-data.org]]

#+name: run-default
#+BEGIN_SRC sh :eval no-export :results output :exports both
python  create-data.py
#+END_SRC

The output explains the generation run

#+RESULTS: run-default
: Created 7 test images in 'out/tsrVOC/JPEGImages' with annotations in 'out/tsrVOC/Annotations' folders
:  class names in 'out/tsrVOC/classes.txt' and list of images 'out/tsrVOC/imagelist.txt'
:  input from from class images 'Images/signs' and backgrounds'backgrounds' folders


*** Input: Class images option =classImages= 

Class image directory is pointed by =classImages= option. 

Option =classesTemplate= defines template, which controls, how class
name is extracted from image names. This template referes to names in
naming pattern =value-type-startOrEnd.ext=.


Default class images located in directory =Images/signs= take
following values:
- =value=  : ={20,30,40,50,60,70,80,100,120,urban}=
- =type= :  ={sign, area,led}=
- =startOrEnd= :  ={start,end}=
- =ext= is valid image file extension e.g. =png=, =jpg=


#+BEGIN_SRC sh :eval no-export :results output :exports results
ls -ltr Images/signs
#+END_SRC

#+RESULTS:
#+begin_example
total 3612
-rw-rw-r-- 1 jj jj 176685 touko  3 19:58 20-sign-start.png
-rw-rw-r-- 1 jj jj 148167 touko  3 19:59 70-sign-start.png
-rw-rw-r-- 1 jj jj 159586 touko  3 19:59 80-sign-start.png
-rw-rw-r-- 1 jj jj 159237 touko  3 20:00 100-sign-start.png
-rw-rw-r-- 1 jj jj 159774 touko  3 20:00 120-sign-start.png
-rw-rw-r-- 1 jj jj 139417 touko  3 20:01 20-sign-end.png
-rw-rw-r-- 1 jj jj 138868 touko  3 20:02 40-sign-end.png
-rw-rw-r-- 1 jj jj 141187 touko  3 20:03 60-sign-end.png
-rw-rw-r-- 1 jj jj  91977 touko  3 20:03 30-area-start.png
-rw-rw-r-- 1 jj jj  84133 touko  3 20:04 40-area-start.png
-rw-rw-r-- 1 jj jj  90324 touko  3 20:04 50-area-start.png
-rw-rw-r-- 1 jj jj  92117 touko  3 20:04 60-area-start.png
-rw-rw-r-- 1 jj jj 144065 touko  3 20:05 30-area-end.png
-rw-rw-r-- 1 jj jj 142809 touko  3 20:05 40-area-end.png
-rw-rw-r-- 1 jj jj 144341 touko  3 20:05 50-area-end.png
-rw-rw-r-- 1 jj jj 145483 touko  3 20:06 60-area-end.png
-rw-rw-r-- 1 jj jj  38379 touko  3 20:14 80-led-start.png
-rw-rw-r-- 1 jj jj  60020 touko  3 20:15 120-led-start.png
-rw-rw-r-- 1 jj jj   7417 touko  3 20:16 100-led-start.png
-rw-rw-r-- 1 jj jj 167258 touko  4 10:34 50-sign-start.png
-rw-rw-r-- 1 jj jj 139883 touko  4 10:36 50-sign-end.png
-rw-rw-r-- 1 jj jj 140155 touko  4 10:49 30-sign-end.png
-rw-rw-r-- 1 jj jj 156815 touko  4 10:50 30-sign-start.png
-rw-rw-r-- 1 jj jj 148650 touko  4 10:51 40-sign-start.png
-rw-rw-r-- 1 jj jj 132627 touko  4 10:52 70-sign-end.png
-rw-rw-r-- 1 jj jj 210360 touko  4 10:56 60-sign-start.png
-rw-rw-r-- 1 jj jj  47325 touko  4 10:59 urban-area-start.png
-rw-rw-r-- 1 jj jj  90642 touko  4 11:00 urban-area-end.png
-rw-rw-r-- 1 jj jj  42307 touko  4 13:10 30-led-start.png
-rw-rw-r-- 1 jj jj  43540 touko  4 13:11 60-led-start.png
-rw-rw-r-- 1 jj jj  44196 touko  4 13:13 50-led-start.png
#+end_example

For example, one of the class images =100-sign-start.png= 

[[file:Images/signs/100-sign-start.png]]


*** Input: Background images option =backgrounds=

=create-data.py= merges class images with background images under
directory pointed by =backgrounds= -option. Example backaground images
packaged with the tool are:

#+BEGIN_SRC sh :eval no-export :results output :exports results
find backgrounds \( -name '*.JPG' -o  -name '*.jpg' \)
#+END_SRC

#+RESULTS:
: backgrounds/misc/frilly_0032.jpg
: backgrounds/misc/frilly_0003.jpg
: backgrounds/roads/CIMG0726.JPG.jpg
: backgrounds/roads/CIMG3009.JPG.jpg
: backgrounds/forest/SAM_0807.JPG
: backgrounds/forest/SAM_0808.JPG
: backgrounds/forest/SAM_0806.JPG

One of these examples, =backgrounds/roads/CIMG0726.JPG.jpg=, is shown
below:

[[file:backgrounds/roads/CIMG0726.JPG.jpg]]


*** Output: List of test images option =imagelist=

Names of generated test image files are written into file pointed by
=imagelist= option. Format of the line is given by =imagelistTemplate=
-option.

For the example the tool outputs
#+BEGIN_SRC sh :eval no-export :results output :exports results
cat out/tsrVOC/imagelist.txt
#+END_SRC

#+RESULTS:
: TSR-image00000 -1
: TSR-image00001 -1
: TSR-image00002 -1
: TSR-image00003 -1
: TSR-image00004 -1
: TSR-image00005 -1
: TSR-image00006 -1


*** Output: list of class names option =classes=

Class names of the images are written into a file pointed by =classes=
options. 

For the example run class names are:

#+BEGIN_SRC sh :eval no-export :results output :exports results
cat out/tsrVOC/classes.txt
#+END_SRC

#+RESULTS:
: 40-end
: 50-start
: 60-end
: 30-start
: 60-start
: urban-start
: 30-end




*** Output: generated test images options =images=

Test images are genered into the directory pointed by =images= option. 

For the example, the tool generates the following files

 #+BEGIN_SRC sh :eval no-export :results output :exports results 
 ls -tr out/tsrVOC/JPEGImages/
 #+END_SRC

 #+RESULTS:
 : TSR-image00000.jpg
 : TSR-image00001.jpg
 : TSR-image00002.jpg
 : TSR-image00003.jpg
 : TSR-image00004.jpg
 : TSR-image00005.jpg
 : TSR-image00006.jpg

One of the test images =TSR-image00002.jpg=:

 #+BEGIN_SRC sh :eval no-export :results output raw :exports results
 find out/tsrVOC/JPEGImages -name '*002.jpg' -exec echo [[file:{}]] \;
 #+END_SRC

 #+RESULTS:
 [[file:out/tsrVOC/JPEGImages/TSR-image00002.jpg]]



*** Output: generated XML- annotations options =annotations=

Test image annotatios are generated into directory pointed by
=annotations= -option.  Below is the content for example run:

 #+BEGIN_SRC sh :eval no-export :results output :exports results
 ls -ltr out/tsrVOC/Annotations/
 #+END_SRC

 #+RESULTS:
 : total 28
 : -rw-rw-r-- 1 jj jj 606 touko 13 10:48 TSR-image00000.xml
 : -rw-rw-r-- 1 jj jj 603 touko 13 10:48 TSR-image00001.xml
 : -rw-rw-r-- 1 jj jj 601 touko 13 10:48 TSR-image00002.xml
 : -rw-rw-r-- 1 jj jj 605 touko 13 10:48 TSR-image00003.xml
 : -rw-rw-r-- 1 jj jj 607 touko 13 10:48 TSR-image00004.xml
 : -rw-rw-r-- 1 jj jj 606 touko 13 10:48 TSR-image00005.xml
 : -rw-rw-r-- 1 jj jj 605 touko 13 10:48 TSR-image00006.xml


Example annotation file =TSR-image00002.xml=

 #+BEGIN_SRC sh :eval no-export :results output :exports results
 cat out/tsrVOC/Annotations/TSR-image00002.xml
 #+END_SRC

 #+RESULTS:
 #+begin_example
 <annotation>
         <folder>TSR1</folder>
         <filename>TSR-image00002.jpg</filename>
         <source>
                 <database>TSR training data</database>
                 <annotation>classInfo: {'value': '20', 'type': 'sign', 'startOrEnd': 'start'}</annotation>
                 <image>flickr</image>
         </source>
         <size>
                 <width>1200</width>
                 <height>900</height>
                 <depth>3</depth>
         </size>
         <segmented>0</segmented>
         <object>
                 <name>20-start</name>
                 <pose>Unspecified</pose>
                 <truncated>0</truncated>
                 <difficult>0</difficult>
                 <bndbox>
                         <xmin>268</xmin>
                         <ymin>161</ymin>
                         <xmax>499</xmax>
                         <ymax>390</ymax>
                 </bndbox>
         </object>
 </annotation>
 #+end_example




*** Convert images to tensorflow format


 #+BEGIN_SRC sh :eval no-export :results output :exports none
 mkdir out/tfData
 #+END_SRC


**** Split image set to training and validation


 #+RESULTS:


 Split =out/tsrVOC/imagelist.txt= into two files
 =out/tsrVOC/ImageSets/Main/aeroplane_train.txt= and
 =out/tsrVOC/ImageSets/Main/aeroplane_val.txt= used by [[https://github.com/zzh8829/yolov3-tf2/blob/master/tools/voc2012.py][yolov3-tf2 VOC
 conversion tools]]

 #+BEGIN_SRC sh :eval no-export :results output
 mkdir -p out/tsrVOC/ImageSets/Main
 tail -3 out/tsrVOC/imagelist.txt > out/tsrVOC/ImageSets/Main/aeroplane_train.txt
 head  -4 out/tsrVOC/imagelist.txt > out/tsrVOC/ImageSets/Main/aeroplane_val.txt
 #+END_SRC

 #+RESULTS:

 #+BEGIN_SRC sh :eval no-export :results output :exports none
 ls -ltr out/tsrVOC/ImageSets/Main
 #+END_SRC

 #+RESULTS:
 : total 8
 : -rw-rw-r-- 1 jj jj 72 touko 13 14:00 aeroplane_val.txt
 : -rw-rw-r-- 1 jj jj 54 touko 13 14:00 aeroplane_train.txt



**** Convert training dataset to tensorflow format

 #+BEGIN_SRC sh :eval no-export :results output :var TAG=tag-number
   docker run \
        --user $(id -u):$(id -g) \
        --workdir /yolov3-tf2 \
        --volume $(pwd)/out/tsrVOC/:/yolov3-tf2/tsrVOC \
        --volume $(pwd)/out/tfData/:/yolov3-tf2/tfData \
        marcus2002/yolov3-tf2-training:$TAG \
          python tools/voc2012.py \
            --classes tsrVOC/classes.txt \
            --data_dir tsrVOC \
            --output_file tfData/tsr_train.tfrecord \
            --split train
 #+END_SRC



 #+RESULTS:

 The result is

 #+BEGIN_SRC sh :eval no-export :results output :exports results
 ls -tr out/tfData/tsr_train.tfrecord
 #+END_SRC

 #+RESULTS:
 : out/tfData/tsr_train.tfrecord


**** Convert validation dataset to tensorflow format

 #+BEGIN_SRC sh :eval no-export :results output :var TAG=tag-number
   docker run \
        --user $(id -u):$(id -g) \
        --workdir /yolov3-tf2 \
        --volume $(pwd)/out/tsrVOC/:/yolov3-tf2/tsrVOC \
        --volume $(pwd)/out/tfData/:/yolov3-tf2/tfData \
        marcus2002/yolov3-tf2-training:$TAG \
          python tools/voc2012.py \
            --classes tsrVOC/classes.txt \
            --data_dir tsrVOC \
            --output_file tfData/tsr_val.tfrecord \
            --split val
 #+END_SRC

 #+RESULTS:

 The result is

 #+BEGIN_SRC sh :eval no-export :results output :exports results
 ls -tr out/tfData/tsr_val.tfrecord
 #+END_SRC

 #+RESULTS:
 : out/tfData/tsr_val.tfrecord


*** Visualy validate tensorflow conversion

 To visualize training tensorflow data in
 =out/tfData/tsr_train.tfrecord= run the command

 #+BEGIN_SRC sh :eval no-export :results output :var TAG=tag-number
   docker run \
        --user $(id -u):$(id -g) \
        --workdir /yolov3-tf2 \
        --volume $(pwd)/out/tsrVOC/:/yolov3-tf2/tsrVOC \
        --volume $(pwd)/out/tfData/:/yolov3-tf2/tfData \
        marcus2002/yolov3-tf2-training:$TAG \
          python tools/visualize_dataset.py \
            --classes tsrVOC/classes.txt \
            --dataset  tfData/tsr_train.tfrecord \
            --output tfData/visu-trainset.jpg


 #+END_SRC

 #+RESULTS:

 The result shows

 [[file:out/tfData/visu-trainset.jpg]]


 To visualize dataset in =out/tfData/tsr_val.tfrecord= run

 #+BEGIN_SRC sh :eval no-export :results output :var TAG=tag-number
   docker run \
        --user $(id -u):$(id -g) \
        --workdir /yolov3-tf2 \
        --volume $(pwd)/out/tsrVOC/:/yolov3-tf2/tsrVOC \
        --volume $(pwd)/out/tfData/:/yolov3-tf2/tfData \
        marcus2002/yolov3-tf2-training:$TAG \
          python tools/visualize_dataset.py \
            --classes tsrVOC/classes.txt \
            --dataset  tfData/tsr_val.tfrecord \
            --output tfData/visu-valset.jpg
 #+END_SRC

 #+RESULTS:

 The result shows

 [[file:out/tfData/visu-valset.jpg]]


** Filters

This chapter documents filters in =create-data.py= using tables with
columns for
- filter input parameters
- the result of filtering image shown below
- and the associated mask, which filter also produces

The unfiltered 200 pixel wide image 


 #+RESULTS: filtered-image
 [[file:./pics/example.jpg]]


#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python* :exports none
  for moduleName in [ 'src.imageTools', "src.classImages"]:
      if moduleName  in sys.modules:
          del sys.modules[moduleName]

  import src.util
  import cv2
  import os.path
  import imutils
  import src.imageTools
  import src.classImages

  def imageLink( imagePath ):
      return( "[[file:./" + imagePath + "]]" )

  def filterImage( imagePath, filter, filterMask, imageFile=None, maskFile=None, width =100 ):

      # prepare image && mask for  filtering
      img = cv2.imread( imagePath)
      cropped, mask = src.classImages.maskImage(img)
      if width is not None: 
          img = imutils.resize( img, width=width )
          mask = imutils.resize( mask, width=width )
      img, filteredMask = filter( img, mask=mask )
      ## if filterMask: mask = filter( mask )

      if imageFile is None: imageFile = os.path.basename(imagePath)
      if maskFile is None: maskFile = os.path.basename(imagePath) + "-mask"
      picPath = os.path.join( "pics", imageFile )
      cv2.imwrite( picPath, img )
      maskPath = os.path.join( "pics", maskFile )
      if filteredMask is not None: cv2.imwrite( maskPath, filteredMask )
      return( imageLink(picPath), imageLink(maskPath) )


  def filterDocument( imagePath, filterName, filterTool, filterValues, filterMask=False, strValues=None ):
      def printRow( col1, col2, col3,  sep="|" ):
          if sep is not None: 
              print( sep, col1, sep, col2, sep, col3, sep)
          else:
              print( col1, col2,  )

      printRow( filterName, "Filtered image", "Mask" )
      printRow( "|---+---+---|", "", "", sep = None )

      for index, filterValue in enumerate(filterValues):
          if  strValues is None:
              strValue = str(filterValue)
          else:
              strValue = str( strValues[index])
          strValueInName = strValue.replace( '[', "").replace( ']', "").replace( '(', "").replace( ')', "").replace( ',', "").replace( ' ', "")
          imageFile =  filterName + strValueInName + ".png"
          maskFile = filterName + strValueInName + "-mask.png"
          imageLink, maskLink = filterImage(
              imagePath,
              lambda img, mask=None: filterTool( img, filterValue, mask=mask ), 
              filterMask,
              imageFile = imageFile,
              maskFile = maskFile)

          printRow( strValue, imageLink, maskLink )

      printRow( "|---+---+---|", "", "", sep = None )

#+END_SRC

#+RESULTS:


 #+name: filtered-image
 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   imagePath = "Images/signs/50-sign-start.png"
   filter = lambda img, mask: src.imageTools.resize_image( img, 200, mask=None )
   picPath,_ = filterImage( imagePath, filter, False, imageFile="example.jpg" )
   print(picPath )

 #+END_SRC

#+RESULTS:


*** Blur

Blur filter options are =blur= (for class images) and =blur2= (for merged test image).

 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   imagePath = "Images/signs/50-sign-start.png"
   filterTool = src.imageTools.blur_image
   filterValues = [ 1,3,5,10 ]

   filterDocument( imagePath, "Blur", filterTool, filterValues )
 #+END_SRC

 #+RESULTS:
 | Blur | Filtered image         | Mask                        |
 |------+------------------------+-----------------------------|
 |    1 | [[file:./pics/Blur1.png]]  | [[file:./pics/Blur1-mask.png]]  |
 |    3 | [[file:./pics/Blur3.png]]  | [[file:./pics/Blur3-mask.png]]  |
 |    5 | [[file:./pics/Blur5.png]]  | [[file:./pics/Blur5-mask.png]]  |
 |   10 | [[file:./pics/Blur10.png]] | [[file:./pics/Blur10-mask.png]] |
 |------+------------------------+-----------------------------|


*** Brightness

Blur filter options are =brightness= (for class images) and
=brightness2= (for merged test image).

 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   imagePath = "Images/signs/50-sign-start.png"
   filterTool = src.imageTools.brightness_image
   filterValues = [ -250, -200, -100, -50, 0, 50, 100, 200, 250 ]

   filterDocument( imagePath, "Brightness", filterTool, filterValues )
 #+END_SRC

 #+RESULTS:
 | Brightness | Filtered image                 | Mask                                |
 |------------+--------------------------------+-------------------------------------|
 |       -250 | [[file:./pics/Brightness-250.png]] | [[file:./pics/Brightness-250-mask.png]] |
 |       -200 | [[file:./pics/Brightness-200.png]] | [[file:./pics/Brightness-200-mask.png]] |
 |       -100 | [[file:./pics/Brightness-100.png]] | [[file:./pics/Brightness-100-mask.png]] |
 |        -50 | [[file:./pics/Brightness-50.png]]  | [[file:./pics/Brightness-50-mask.png]]  |
 |          0 | [[file:./pics/Brightness0.png]]    | [[file:./pics/Brightness0-mask.png]]    |
 |         50 | [[file:./pics/Brightness50.png]]   | [[file:./pics/Brightness50-mask.png]]   |
 |        100 | [[file:./pics/Brightness100.png]]  | [[file:./pics/Brightness100-mask.png]]  |
 |        200 | [[file:./pics/Brightness200.png]]  | [[file:./pics/Brightness200-mask.png]]  |
 |        250 | [[file:./pics/Brightness250.png]]  | [[file:./pics/Brightness250-mask.png]]  |
 |------------+--------------------------------+-------------------------------------|


*** Gamma

Not used.

 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   imagePath = "Images/signs/50-sign-start.png"
   filterTool = src.imageTools.gamma_image
   filterValues = [  -4, -2, -1, 1, 2, 4 ]

   filterDocument( imagePath, "Gamma", filterTool, filterValues )
 #+END_SRC

 #+RESULTS:
 | Gamma | Filtered image          | Mask                         |
 |-------+-------------------------+------------------------------|
 |    -4 | [[file:./pics/Gamma-4.png]] | [[file:./pics/Gamma-4-mask.png]] |
 |    -2 | [[file:./pics/Gamma-2.png]] | [[file:./pics/Gamma-2-mask.png]] |
 |    -1 | [[file:./pics/Gamma-1.png]] | [[file:./pics/Gamma-1-mask.png]] |
 |     1 | [[file:./pics/Gamma1.png]]  | [[file:./pics/Gamma1-mask.png]]  |
 |     2 | [[file:./pics/Gamma2.png]]  | [[file:./pics/Gamma2-mask.png]]  |
 |     4 | [[file:./pics/Gamma4.png]]  | [[file:./pics/Gamma4-mask.png]]  |
 |-------+-------------------------+------------------------------|


*** Resize

Not used.

 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   imagePath = "Images/signs/50-sign-start.png"
   filterTool = src.imageTools.resize_image
   filterValues = [ 20,  50, 100 ]

   filterDocument( imagePath, "Resize", filterTool, filterValues, filterMask=True )
 #+END_SRC

 #+RESULTS:
 | Resize | Filtered image            | Mask                           |
 |--------+---------------------------+--------------------------------|
 |     20 | [[file:./pics/Resize20.png]]  | [[file:./pics/Resize20-mask.png]]  |
 |     50 | [[file:./pics/Resize50.png]]  | [[file:./pics/Resize50-mask.png]]  |
 |    100 | [[file:./pics/Resize100.png]] | [[file:./pics/Resize100-mask.png]] |
 |--------+---------------------------+--------------------------------|


*** Rotate

Rotate filter option is =rotates=. It is applied only on class images. 


 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   imagePath = "Images/signs/50-sign-start.png"
   filterTool = src.imageTools.rotate_image
   filterValues = [ -10, -5, 0, 30 ]

   filterDocument( imagePath, "Rotate", filterTool, filterValues, filterMask=True )
 #+END_SRC

 #+RESULTS:
 | Rotate | Filtered image            | Mask                           |
 |--------+---------------------------+--------------------------------|
 |    -10 | [[file:./pics/Rotate-10.png]] | [[file:./pics/Rotate-10-mask.png]] |
 |     -5 | [[file:./pics/Rotate-5.png]]  | [[file:./pics/Rotate-5-mask.png]]  |
 |      0 | [[file:./pics/Rotate0.png]]   | [[file:./pics/Rotate0-mask.png]]   |
 |     30 | [[file:./pics/Rotate30.png]]  | [[file:./pics/Rotate30-mask.png]]  |
 |--------+---------------------------+--------------------------------|

*Notice*, how rotating a does not change the white circle in the mask
aboveb, and how the mask size changes as rectangular image is
rotated. The mask for a rectangular object, shows the effect of
rotation also on the white area.

 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   imagePath = "Images/signs/urban-area-end.png"
   filterTool = src.imageTools.rotate_image
   filterValues = [ -15, 45 ]

   filterDocument( imagePath, "Rotate", filterTool, filterValues, filterMask=True )
 #+END_SRC

 #+RESULTS:
 | Rotate | Filtered image            | Mask                           |
 |--------+---------------------------+--------------------------------|
 |    -15 | [[file:./pics/Rotate-15.png]] | [[file:./pics/Rotate-15-mask.png]] |
 |     45 | [[file:./pics/Rotate45.png]]  | [[file:./pics/Rotate45-mask.png]]  |
 |--------+---------------------------+--------------------------------|


*** Perspective

Perspective filter option is =perspective=. It is applied only on
class images.

 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   for moduleName in [ 'src.imageTools']:
       if moduleName  in sys.modules:
           del sys.modules[moduleName]
   import src.imageTools

   imagePath = "Images/signs/50-sign-start.png"
   filterTool = src.imageTools.perspective_image

   filterValues = [ 
       (0,-45), (0,45)
       , (-45,-0), (45,0)
       , (45,45), (-45,45)
   ]

   filterDocument( imagePath, "Perspective", filterTool, filterValues, filterMask=True )


 #+END_SRC

 #+RESULTS:
 | Perspective | Filtered image                   | Mask                                  |
 |-------------+----------------------------------+---------------------------------------|
 | (0, -45)    | [[file:./pics/Perspective0-45.png]]  | [[file:./pics/Perspective0-45-mask.png]]  |
 | (0, 45)     | [[file:./pics/Perspective045.png]]   | [[file:./pics/Perspective045-mask.png]]   |
 | (-45, 0)    | [[file:./pics/Perspective-450.png]]  | [[file:./pics/Perspective-450-mask.png]]  |
 | (45, 0)     | [[file:./pics/Perspective450.png]]   | [[file:./pics/Perspective450-mask.png]]   |
 | (45, 45)    | [[file:./pics/Perspective4545.png]]  | [[file:./pics/Perspective4545-mask.png]]  |
 | (-45, 45)   | [[file:./pics/Perspective-4545.png]] | [[file:./pics/Perspective-4545-mask.png]] |
 |-------------+----------------------------------+---------------------------------------|


*** Combined filter

Option =classImageWrangles= defines filters to apply on class images.
Similarly, option =testImageWrangles= defines filters applied on
merged test images. 

Combined filters include all possible value combinations for the
filters listed in these options. Filter values includes also an
special no-opration value, which is added automatically included when
creating combined filters.


 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   for moduleName in [ 'src.imageTools']:
       if moduleName  in sys.modules:
           del sys.modules[moduleName]
   import src.imageTools

   funcs = {
      "blur" : src.imageTools.blur_image,
       "rotate": src.imageTools.rotate_image,
       "perspective": src.imageTools.perspective_image,
       "brightness": src.imageTools.brightness_image
   }

   #



   imagePath = "Images/signs/50-sign-start.png"

   filterValues = [
        [["blur", 8], ["rotate", 60]]
        , [ ["rotate", 60]]
        , [ ["blur", 8]]
       , [["blur", 8], ["rotate", 60], ["perspective", (10,45)]]
       , [["blur", 8], ["perspective", (10,45)], ["rotate", 60]]
       , [["brightness", -100],  ["perspective", (10,45)]]

   ]


   def createfilterLambda( funcName, params ):
       return( lambda img, mask : funcs[funcName]( img, params, mask=mask ) )


   lamdaFuncs = [[ createfilterLambda( funcName, params ) for funcName, params in entry ]
                 for entry in filterValues ]

   strValues = [ ", ".join(["{0}({1})".format(funcName, str(params) ) for funcName, params in entry] )  for entry in filterValues 
   ]
   strValues



   # filterDocument( imagePath, "Multifilter", filterTool, filterValuesPure, filterMask=True )
   filterTool = src.imageTools.multi_filter
   filterDocument( imagePath, "Multifilter", filterTool, lamdaFuncs, filterMask=True, strValues=strValues )


 #+END_SRC

 #+RESULTS:
 | Multifilter                                | Filtered image                                           | Mask                                                          |
 |--------------------------------------------+----------------------------------------------------------+---------------------------------------------------------------|
 | blur(8), rotate(60)                        | [[file:./pics/Multifilterblur8rotate60.png]]                 | [[file:./pics/Multifilterblur8rotate60-mask.png]]                 |
 | rotate(60)                                 | [[file:./pics/Multifilterrotate60.png]]                      | [[file:./pics/Multifilterrotate60-mask.png]]                      |
 | blur(8)                                    | [[file:./pics/Multifilterblur8.png]]                         | [[file:./pics/Multifilterblur8-mask.png]]                         |
 | blur(8), rotate(60), perspective((10, 45)) | [[file:./pics/Multifilterblur8rotate60perspective1045.png]]  | [[file:./pics/Multifilterblur8rotate60perspective1045-mask.png]]  |
 | blur(8), perspective((10, 45)), rotate(60) | [[file:./pics/Multifilterblur8perspective1045rotate60.png]]  | [[file:./pics/Multifilterblur8perspective1045rotate60-mask.png]]  |
 | brightness(-100), perspective((10, 45))    | [[file:./pics/Multifilterbrightness-100perspective1045.png]] | [[file:./pics/Multifilterbrightness-100perspective1045-mask.png]] |
 |--------------------------------------------+----------------------------------------------------------+---------------------------------------------------------------|



* Fin                                                              :noexport:

** Emacs variables

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:


