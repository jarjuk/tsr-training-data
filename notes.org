
* Document filters

#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
  import src.imageTools
  import src.util
  import cv2
  imagePath = "Images/signs/100-sign-start.png"
  img = cv2.imread( imagePath).resize( "100")

  src.util.showImage( img )
#+END_SRC

* Setup session                                                    :noexport:

#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
  for moduleName in [ 'src.imageTools']:
      if moduleName  in sys.modules:
          del sys.modules[moduleName]

  import src.util
  import cv2
  import os.path
  import imutils
  import src.imageTools

  def imageLink( imagePath ):
      return( "[[file:./" + imagePath + "]]" )

  def filterImage( imagePath, filter, imageFile=None, width =100 ):
        img = cv2.imread( imagePath)
        if width is not None: img = imutils.resize( img, width=width)
        img = filter( img )
        if imageFile is None: imageFile = os.path.basename(imagePath)
        picPath = os.path.join( "pics", imageFile )
        cv2.imwrite( picPath, img )
        return( imageLink(picPath) )


  def filterDocument( imagePath, filterName, filterTool, filterValues ):
      def printRow( col1, col2, sep="|" ):
          if sep is not None: 
              print( sep, col1, sep, col2, sep)
          else:
              print( col1, col2 )

      printRow( filterName, "Filtered image" )
      printRow( "|---+---|", "", sep = None )

      for filterValue in filterValues:
          printRow( str(filterValue),
                    filterImage( imagePath, lambda img: filterTool( img, filterValue),
                                 imageFile = filterName + str(filterValue) + ".png"))

      printRow( "|---+---|", "", sep = None )

#+END_SRC

#+RESULTS:


* Image filters

** Image to filter
 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   filter = lambda img: src.imageTools.resize( img, 200 )
   imagePath = "Images/signs/50-sign-start.png"
   picPath = filterImage( imagePath,  filter )
   print(picPath )

 #+END_SRC

 #+RESULTS:
 [[file:./pics/50-sign-start.png]]


** Rotate

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.rotate_image
  filterValues = [ -10, -5, 0, -30 ]

  filterDocument( imagePath, "Rotate", filterTool, filterValues )
#+END_SRC

#+RESULTS:
| Rotate | Filtered image            |
|--------+---------------------------|
|    -10 | [[file:./pics/Rotate-10.png]] |
|     -5 | [[file:./pics/Rotate-5.png]]  |
|      0 | [[file:./pics/Rotate0.png]]   |
|    -30 | [[file:./pics/Rotate-30.png]] |
|--------+---------------------------|





** Blur

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.blur_image
  filterValues = [ 1,3,5,10 ]

  filterDocument( imagePath, "Blur", filterTool, filterValues )
#+END_SRC

#+RESULTS:
| Blur | Filtered image         |
|------+------------------------|
|    1 | [[file:./pics/Blur1.png]]  |
|    3 | [[file:./pics/Blur3.png]]  |
|    5 | [[file:./pics/Blur5.png]]  |
|   10 | [[file:./pics/Blur10.png]] |
|------+------------------------|





** Brightness

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.brightness_image
  filterValues = [ -250, -200, -100, -50, 0, 50, 100, 200, 250 ]

  filterDocument( imagePath, "Brightness", filterTool, filterValues )
#+END_SRC

#+RESULTS:
| Brightness | Filtered image                 |
|------------+--------------------------------|
|       -250 | [[file:./pics/Brightness-250.png]] |
|       -200 | [[file:./pics/Brightness-200.png]] |
|       -100 | [[file:./pics/Brightness-100.png]] |
|        -50 | [[file:./pics/Brightness-50.png]]  |
|          0 | [[file:./pics/Brightness0.png]]    |
|         50 | [[file:./pics/Brightness50.png]]   |
|        100 | [[file:./pics/Brightness100.png]]  |
|        200 | [[file:./pics/Brightness200.png]]  |
|        250 | [[file:./pics/Brightness250.png]]  |
|------------+--------------------------------|





** Gamma

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.gamma_image
  filterValues = [ -16, -8, -4, -2, -1, 1, 2, 4, 8, 16 ]

  filterDocument( imagePath, "Gamma", filterTool, filterValues )
#+END_SRC

#+RESULTS:
| Gamma | Filtered image           |
|-------+--------------------------|
|   -16 | [[file:./pics/Gamma-16.png]] |
|    -8 | [[file:./pics/Gamma-8.png]]  |
|    -4 | [[file:./pics/Gamma-4.png]]  |
|    -2 | [[file:./pics/Gamma-2.png]]  |
|    -1 | [[file:./pics/Gamma-1.png]]  |
|     1 | [[file:./pics/Gamma1.png]]   |
|     2 | [[file:./pics/Gamma2.png]]   |
|     4 | [[file:./pics/Gamma4.png]]   |
|     8 | [[file:./pics/Gamma8.png]]   |
|    16 | [[file:./pics/Gamma16.png]]  |
|-------+--------------------------|

** Perspective

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  for moduleName in [ 'src.imageTools']:
      if moduleName  in sys.modules:
          del sys.modules[moduleName]
  import src.imageTools

  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.perspective_image

  filterValues = [ (0,20), (20,0), (20,20), (-20,20), (20,-20) ]

  filterDocument( imagePath, "Perspective", filterTool, filterValues )


#+END_SRC

#+RESULTS:
| Perspective | Filtered image                       |
|-------------+--------------------------------------|
| (0, 20)     | [[file:./pics/Perspective(0, 20).png]]   |
| (20, 0)     | [[file:./pics/Perspective(20, 0).png]]   |
| (20, 20)    | [[file:./pics/Perspective(20, 20).png]]  |
| (-20, 20)   | [[file:./pics/Perspective(-20, 20).png]] |
| (20, -20)   | [[file:./pics/Perspective(20, -20).png]] |
|-------------+--------------------------------------|



* Fin                                                              :noexport:

** Emacs variables

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:


