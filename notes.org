
* Document filters

#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
  import src.imageTools
  import src.util
  import cv2
  imagePath = "Images/signs/100-sign-start.png"
  img = cv2.imread( imagePath).resize( "100")

  src.util.showImage( img )
#+END_SRC


* Setup session                                                    :noexport:

#+BEGIN_SRC python :eval no-export :results output :noweb no :session *Python*
  for moduleName in [ 'src.imageTools', "src.classImages"]:
      if moduleName  in sys.modules:
          del sys.modules[moduleName]

  import src.util
  import cv2
  import os.path
  import imutils
  import src.imageTools
  import src.classImages

  def imageLink( imagePath ):
      return( "[[file:./" + imagePath + "]]" )

  def filterImage( imagePath, filter, filterMask, imageFile=None, maskFile=None, width =100 ):
      img = cv2.imread( imagePath)
      cropped,mask = src.classImages.maskImage(img)
      if width is not None: 
          img = imutils.resize( img, width=width)
          mask = imutils.resize( mask, width=width)
      img = filter( img )
      if filterMask: mask = filter( mask )

      if imageFile is None: imageFile = os.path.basename(imagePath)
      if maskFile is None: maskFile = os.path.basename(imagePath) + "-mask"
      picPath = os.path.join( "pics", imageFile )
      cv2.imwrite( picPath, img )
      maskPath = os.path.join( "pics", maskFile )
      cv2.imwrite( picPath, img )
      cv2.imwrite( maskPath, mask )
      return( imageLink(picPath), imageLink(maskPath) )


  def filterDocument( imagePath, filterName, filterTool, filterValues, filterMask=False ):
      def printRow( col1, col2, col3,  sep="|" ):
          if sep is not None: 
              print( sep, col1, sep, col2, sep, col3, sep)
          else:
              print( col1, col2,  )

      printRow( filterName, "Filtered image", "Mask" )
      printRow( "|---+---+---|", "", "", sep = None )

      for filterValue in filterValues:
          imageLink, maskLink = filterImage(
              imagePath,
              lambda img: filterTool( img, filterValue),
              filterMask,
              imageFile = filterName + str(filterValue) + ".png",
              maskFile = filterName + str(filterValue) + "-mask.png")

          printRow( str(filterValue), imageLink, maskLink )

      printRow( "|---+---+---|", "", "", sep = None )

#+END_SRC

#+RESULTS:


* Image filters

** Image to filter
 #+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
   filter = lambda img: src.imageTools.resize( img, 200 )
   imagePath = "Images/signs/50-sign-start.png"
   picPath,maskPath = filterImage( imagePath,  filter, False )
   print(picPath )

 #+END_SRC

 #+RESULTS:
 [[file:./pics/50-sign-start.png]]


** Blur

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.blur_image
  filterValues = [ 1,3,5,10 ]

  filterDocument( imagePath, "Blur", filterTool, filterValues )
#+END_SRC

#+RESULTS:
| Blur | Filtered image         | Mask                        |
|------+------------------------+-----------------------------|
|    1 | [[file:./pics/Blur1.png]]  | [[file:./pics/Blur1-mask.png]]  |
|    3 | [[file:./pics/Blur3.png]]  | [[file:./pics/Blur3-mask.png]]  |
|    5 | [[file:./pics/Blur5.png]]  | [[file:./pics/Blur5-mask.png]]  |
|   10 | [[file:./pics/Blur10.png]] | [[file:./pics/Blur10-mask.png]] |
|------+------------------------+-----------------------------|
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/tmp/babel-NCgRQ4/python-qs5Joz", line 5, in <module>
    filterDocument( imagePath, "Blur", filterTool, filterValues )
  File "/tmp/babel-NCgRQ4/python-1wsVUU", line 39, in filterDocument
    printRow( "|---+---+---|", "", sep = None )
TypeError: printRow() missing 1 required positional argument: 'col3'



** Brightness

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.brightness_image
  filterValues = [ -250, -200, -100, -50, 0, 50, 100, 200, 250 ]

  filterDocument( imagePath, "Brightness", filterTool, filterValues )
#+END_SRC

#+RESULTS:
| Brightness | Filtered image                 | Mask                                |
|------------+--------------------------------+-------------------------------------|
|       -250 | [[file:./pics/Brightness-250.png]] | [[file:./pics/Brightness-250-mask.png]] |
|       -200 | [[file:./pics/Brightness-200.png]] | [[file:./pics/Brightness-200-mask.png]] |
|       -100 | [[file:./pics/Brightness-100.png]] | [[file:./pics/Brightness-100-mask.png]] |
|        -50 | [[file:./pics/Brightness-50.png]]  | [[file:./pics/Brightness-50-mask.png]]  |
|          0 | [[file:./pics/Brightness0.png]]    | [[file:./pics/Brightness0-mask.png]]    |
|         50 | [[file:./pics/Brightness50.png]]   | [[file:./pics/Brightness50-mask.png]]   |
|        100 | [[file:./pics/Brightness100.png]]  | [[file:./pics/Brightness100-mask.png]]  |
|        200 | [[file:./pics/Brightness200.png]]  | [[file:./pics/Brightness200-mask.png]]  |
|        250 | [[file:./pics/Brightness250.png]]  | [[file:./pics/Brightness250-mask.png]]  |
|------------+--------------------------------+-------------------------------------|





** Gamma

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.gamma_image
  filterValues = [ -16, -8, -4, -2, -1, 1, 2, 4, 8, 16 ]

  filterDocument( imagePath, "Gamma", filterTool, filterValues )
#+END_SRC

#+RESULTS:
| Gamma | Filtered image | Mask |
|-------+----------------+------|
/home/jj/work/tsr-training-data/src/imageTools.py:135: RuntimeWarning: divide by zero encountered in double_scalars
  for i in np.arange(0, 256)]).astype("uint8")
| -16 | [[file:./pics/Gamma-16.png]] | [[file:./pics/Gamma-16-mask.png]] |
| -8 | [[file:./pics/Gamma-8.png]] | [[file:./pics/Gamma-8-mask.png]] |
| -4 | [[file:./pics/Gamma-4.png]] | [[file:./pics/Gamma-4-mask.png]] |
| -2 | [[file:./pics/Gamma-2.png]] | [[file:./pics/Gamma-2-mask.png]] |
| -1 | [[file:./pics/Gamma-1.png]] | [[file:./pics/Gamma-1-mask.png]] |
| 1 | [[file:./pics/Gamma1.png]] | [[file:./pics/Gamma1-mask.png]] |
| 2 | [[file:./pics/Gamma2.png]] | [[file:./pics/Gamma2-mask.png]] |
| 4 | [[file:./pics/Gamma4.png]] | [[file:./pics/Gamma4-mask.png]] |
| 8 | [[file:./pics/Gamma8.png]] | [[file:./pics/Gamma8-mask.png]] |
| 16 | [[file:./pics/Gamma16.png]] | [[file:./pics/Gamma16-mask.png]] |
|---+---+---|


** Rotate

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.rotate_image
  filterValues = [ -10, -5, 0, -30 ]

  filterDocument( imagePath, "Rotate", filterTool, filterValues, filterMask=True )
#+END_SRC

#+RESULTS:
| Rotate | Filtered image            | Mask                           |
|--------+---------------------------+--------------------------------|
|    -10 | [[file:./pics/Rotate-10.png]] | [[file:./pics/Rotate-10-mask.png]] |
|     -5 | [[file:./pics/Rotate-5.png]]  | [[file:./pics/Rotate-5-mask.png]]  |
|      0 | [[file:./pics/Rotate0.png]]   | [[file:./pics/Rotate0-mask.png]]   |
|    -30 | [[file:./pics/Rotate-30.png]] | [[file:./pics/Rotate-30-mask.png]] |
|--------+---------------------------+--------------------------------|






** Perspective

#+BEGIN_SRC python :eval no-export :results output raw :session *Python* :exports results
  for moduleName in [ 'src.imageTools']:
      if moduleName  in sys.modules:
          del sys.modules[moduleName]
  import src.imageTools

  imagePath = "Images/signs/50-sign-start.png"
  filterTool = src.imageTools.perspective_image

  filterValues = [ 
      (0,-45), (0,45)
      , (-45,-0), (45,0)
      , (45,45), (-45,45)
  ]

  filterDocument( imagePath, "Perspective", filterTool, filterValues, filterMask=True )


#+END_SRC

#+RESULTS:
| Perspective | Filtered image                       | Mask                                      |
|-------------+--------------------------------------+-------------------------------------------|
| (0, -45)    | [[file:./pics/Perspective(0, -45).png]]  | [[file:./pics/Perspective(0, -45)-mask.png]]  |
| (0, 45)     | [[file:./pics/Perspective(0, 45).png]]   | [[file:./pics/Perspective(0, 45)-mask.png]]   |
| (-45, 0)    | [[file:./pics/Perspective(-45, 0).png]]  | [[file:./pics/Perspective(-45, 0)-mask.png]]  |
| (45, 0)     | [[file:./pics/Perspective(45, 0).png]]   | [[file:./pics/Perspective(45, 0)-mask.png]]   |
| (45, 45)    | [[file:./pics/Perspective(45, 45).png]]  | [[file:./pics/Perspective(45, 45)-mask.png]]  |
| (-45, 45)   | [[file:./pics/Perspective(-45, 45).png]] | [[file:./pics/Perspective(-45, 45)-mask.png]] |
|-------------+--------------------------------------+-------------------------------------------|



* Fin                                                              :noexport:

** Emacs variables

   #+RESULTS:

   # Local Variables:
   # org-confirm-babel-evaluate: nil
   # End:


